AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda with Flask, Quart, Requests, and Mangum with Full IAM Permissions

Resources:
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaAPI
      Handler: lambda_function.lambda_handler # Mangum makes the handler this way for ASGI apps
      Runtime: python3.10 # Compatible with Flask, Quart, and Mangum
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          from flask import Flask, jsonify

          app = Flask(__name__)

          @app.route('/')
          def hello():
              return jsonify(message="Hello from Flask on AWS Lambda!")

          def lambda_handler(event, context):
              from aws_lambda_wsgi import response, wsgi
              return response(wsgi.handle_request(app, event, context))

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaFullPermissionsRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess # Full Permissions for AWS Services
      Policies:
        - PolicyName: LambdaFullPermissionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                  - dynamodb:*
                  - secretsmanager:*
                  - sqs:*
                  - sns:*
                  - execute-api:*
                  - ec2:*
                Resource: '*'

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FlaskQuartAPI

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: api
      RestApiId: !Ref ApiGateway

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          Fn::Sub: 
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
            - {}

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  PermissionForApiGatewayToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/api

Outputs:
  ApiUrl:
    Description: "API Gateway Endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/api"